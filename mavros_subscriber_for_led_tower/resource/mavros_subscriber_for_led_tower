import rclpy
from rclpy.node import Node
from mavros_msgs.msg import State
import gpiod

#pinout for Jetson: https://developer.nvidia.com/embedded/learn/jetson-agx-orin-devkit-user-guide/developer_kit_layout.html
#Another important Jetson resource: https://developer.download.nvidia.com/assets/embedded/secure/jetson/agx_orin/Jetson_AGX_Orin_DevKit_Carrier_Board_Specification_SP-10900-001_v1.1.pdf?pPA1p3QhWXrvi2J_h8P8DDRoqOYluMOFWSel2kg_CqQegQiQxjPIpo28wfKRKeLw02gYB70TQLto-Lgmu-HTRzexRID-8daeJWAiZw9DZ3hJialkN76hVt22DmYBBAvc9GzHHqurlzCax0B7uTE6adpktApQLzVJzAp-kNEPkoBfz6rMDS_0bn3q5RQk8GA3AFtz4K4XD2oStrWtTXHZIAqd7kP0sCwsZRqy8b6G&t=eyJscyI6ImdzZW8iLCJsc2QiOiJodHRwczovL3d3dy5nb29nbGUuY29tLyJ9
#The line values are from the Jetson Pin Extension Header Section there ^ and the command in the terminal gpioinfo gpiochip0
class Communicate_with_GPIO:
    RED_LED_LINE = 27 #TOBE gpio32 pin on jetson
    YELLOW_LED_LINE = 22 #TOBE gpio27 pin on jetson
    GREEN_LED_LINE = 5 #TOBE gpio08 pin on jetson

    KILL_SWITCH_LINE = 17 #This will be an input pin. It needs to sustain the voltage being given to it. gpio35 TOBE tested on jetson

    def __init__(self):
         
        chip = gpiod.Chip('/dev/gpiochip0') #This is an important step so that the correct pins are chosen

        #Gets the addres of the line
        self._red_line = chip.get_line(RED_LED_LINE)
        self._yellow_line = chip.get_line(YELLOW_LED_LINE)
        self._green_line = chip.get_line(GREEN_LED_LINE)
        self._kill_switch_line = chip.get_line(KILL_SWITCH_LINE)

        #Sets the direction of the pin: gpiod.LINE_REQ_DIR_OUT is output and gpiod.LINE_REQ_DIR_IN is input.
        #Consumer name can be anything
        self._red_line.request(consumer="red_led_light", type=gpiod.LINE_REQ_DIR_OUT)
        self._yellow_line.request(consumer="yellow_led_light", type=gpiod.LINE_REQ_DIR_OUT)
        self._green_line.request(consumer="green_led_light", type=gpiod.LINE_REQ_DIR_OUT)

        self._kill_switch_line.request(consumer="kill_switch_input", type=gpiod.LINE_REQ_DIR_IN)

        #A status variable for the kill switch
        self.kill_switch_pressed = False

    
    def __del__(self):
        #Release the pins when the code is being destructed
        self._red_line.release()
        self._yellow_line.release()
        self._green_line.release()
        self._kill_switch_line.release()


    def led_tower_control(self, guided_mode):
       
        kill_switch_activated = (self._kill_switch_line.get_value() == 1)

        if (kill_switch_activated or self._kill_switch_pressed): #To be confirmed with Electrical Team
            self._yellow_line.set_value(0)
            self._green_line.set_value(0)
            self._red_line.set_value(1)
            self._kill_switch_pressed = True
        elif (guided_mode): #If the boat is romote-controlled (RC)
            self._red_line.set_value(0)
            self._green_line.set_value(0)
            self._yellow_line.set_value(1)
        else: #If the boat is auto (AUTO)
            self._red_line.set_value(0)
            self._yellow_line.set_value(0)
            self._green_line.set_value(1)
        

class MavrosStateSubscriber(Node):

    def __init__(self):
        super().__init__('mavros_state_subscriber')
        self.subscription = self.create_subscription(
            State,
            '/mavros/state',
            self.state_callback,
            10)
        self.subscription  # prevent unused variable warning

        #self.gpio_comm = Communicate_with_GPIO() #To Be Uncommented when ported to Jetson

    def state_callback(self, msg):
        guided = msg.guided
        self.get_logger().info(f'Guided: {guided}') #To Be Removed

        #self.gpio_comm.led_tower_control(guided) #Get the status of the boat #To Be Uncommented when ported to Jetson

def main(args=None):
    rclpy.init(args=args)

    mavros_state_subscriber = MavrosStateSubscriber()

    rclpy.spin(mavros_state_subscriber)
    mavros_state_subscriber.get_logger().info('Shutting Down the Node')
    
    # Destroy the node explicitly
    mavros_state_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
